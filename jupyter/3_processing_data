{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Processing Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Working With Numbers\n",
    "Let's get some integer (aka whole number) variables going and learn how to add, divide, subtract and multiply in Python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Addition\n",
    "\n",
    "*Run the following code to see how Python adds together numbers*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "boys = int(input('How many boys are in the class: '))\n",
    "girls = int(input('How many girls are in the class:'))\n",
    "pupils = boys + girls\n",
    "print('There are', pupils,'in the class altogether')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Subtraction\n",
    "\n",
    "*Run the following code to see how Python subtracts numbers*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "bigger_number = 12\n",
    "smaller_number = 10\n",
    "difference = bigger_number - smaller_number\n",
    "print('The difference between', bigger_number, 'and', smaller_number, 'is', difference)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multiplication\n",
    "Python uses an asterisk * to show multiplication.\n",
    "\n",
    "*Run the following code to see how Python multiplies numbers*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "number1 = 5\n",
    "number2 = 6\n",
    "answer = number1 * number2\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Division\n",
    "Python uses a forward slash / to show division.\n",
    "\n",
    "*Run the following code to see how Python divides numbers*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "big_number = 100\n",
    "divisor_number = 25\n",
    "dividend_answer = 100/25\n",
    "print(big_number,'divided by', divisor_number, 'is', dividend_answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extra Useful Bit: Modulo Division (Remainder/Left Overs)\n",
    "Python uses a percentage sign % to calculate remainders\n",
    "\n",
    "*Run the following code to see how Python can compute remainders when dividing*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "big_number = 102\n",
    "divisor_number = 25\n",
    "remainder = 100%25\n",
    "print('If you divide', big_number,'by', divisor_number, 'you get', remainder, 'left over')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Working with Strings - aka Text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Text characters are called strings in Python - this is because they are stored as a string of characters.  \n",
    "Here are two example strings to look at:\n",
    "\n",
    "```python\n",
    "phrase1 = 'The quick brown fox jumped over'\n",
    "phrase2 = 'the moon'\n",
    "```\n",
    "\n",
    "I've assigned them to two variables called phrase1 and phrase2.  \n",
    "*Run the following code to see how we can add strings.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "phrase1 = 'The quick brown fox jumped over'\n",
    "phrase2 = 'the moon'\n",
    "sentence = phrase1+phrase2\n",
    "print(sentence)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Change line 3 of the above program to put in a space**  \n",
    "Hint: +' '+\n",
    "\n",
    "If you've done it right, your output should look like:  \n",
    "\n",
    "The quick brown fox jumped over the moon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "*Choose some of the word variables below, add them to make an example sentence of your own*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "noun1 = 'turnip'\n",
    "noun2 = 'elephant'\n",
    "noun3 = 'worm'\n",
    "noun4 = 'holiday'\n",
    "noun5 = 'Scalloway'\n",
    "verb1 = 'went'\n",
    "verb2 = 'ate'\n",
    "verb3 = 'sat'\n",
    "verb4 = 'jumped'\n",
    "preposition1 = 'on'\n",
    "preposition2 = 'to'\n",
    "preposition3 = 'with'\n",
    "def_article = 'the'\n",
    "indef_article = 'a'\n",
    "\n",
    "example1 = def_article+' '+noun1+' '+verb1+' '+preposition1+' '+noun4+' '+preposition2+' '+noun5\n",
    "example2 = 'change this line'\n",
    "print(example1)\n",
    "print(example2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Getting Rid of all the ' ' Space Bits\n",
    "It's pretty horrible having to do noun1+' '+verb1, putting in all those ' ' spaces.  \n",
    "Here's the same program again, but this time using print() with commas to do the work.  \n",
    "The disadvantage of this is the sentence isn't being stored in a variable.  \n",
    "*In the last line below, use commas to make your own sentence*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "noun1 = 'turnip'\n",
    "noun2 = 'elephant'\n",
    "noun3 = 'worm'\n",
    "noun4 = 'holiday'\n",
    "noun5 = 'Scalloway'\n",
    "verb1 = 'went'\n",
    "verb2 = 'ate'\n",
    "verb3 = 'sat'\n",
    "verb4 = 'jumped'\n",
    "preposition1 = 'on'\n",
    "preposition2 = 'to'\n",
    "preposition3 = 'with'\n",
    "def_article = 'the'\n",
    "indef_article = 'a'\n",
    "\n",
    "print(def_article,noun1,verb1,preposition1,noun4,preposition2,noun5)\n",
    "print('replace this with your own choice of variables')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How Long is a Piece of String\n",
    "\n",
    "[![How Long is Piece of String](http://i.imgur.com/Ot5DWAW.png)](https://vimeo.com/93401635)\n",
    "\n",
    "As well as all that science, Python can easily tell us how long strings really are! Who knew?\n",
    "\n",
    "```python\n",
    "print(len(\"How long is this string?\"))\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise\n",
    "*Print the lengths of each of the strings in these variables using the len() function*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "noun1 = 'turnip'\n",
    "noun2 = 'elephant'\n",
    "noun3 = 'worm'\n",
    "noun4 = 'holiday'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you've done it right you should get 6, 8 , 4 and 7."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
